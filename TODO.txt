This is an overview of the things that are still to do. On my Github there are Issues that adress these.


About the input:
Currently the input for the algorithm is given by in-code declarations (see Main).
This has to be changed in a way that you can input an arbitrary query without making changes to the code.
This could possibly be done by providing the input via a specified .txt file.


About evaluating and querying:
Right now the Eval class creates a SQL-query from the given DataNF and then queries the database.
For this to work the atemporal queries need an actual SQL-query as input.
The answer to the SQL-query isn't saved yet.
The answers to the SQL-queries need to be saved in a way that for future reference you don't have to query the database again (which is impossible as old databases will be unavailable).

Right now subqueries are evaluated after each step.
I distinguished between the evaluation of a subquery and the full query.
The main difference is that variables aren't considered yet but only later if this subquery needs to be evaluated in a full query.
I update the old DataNF by updating the set of set of AnswerTerms with one set of a set containing one AnswerTerm pointing to a dedicated table with only this result.


Testing:
There are no tests yet.
Most of the code can be tested without actually providing a database.
Most classes don't have to be tested at all as they are simple data structures without complicated functions.
Classes that must be tested:
-Eval
-FunctionPhi
-NormalForm
-SubquerySaver
The eval class is not fully completed yet why the testing that is needed can not be determined yet.
FunctionPhi contains the algorithm given in the paper. To test this class one simply needs to calculate queries and see if the results are correct.
NormalForm turns an AnswerTerm into either an AnswerTerm in DNF (CNF possible) or DataNF. DataNF basically represents the NF chosen in the paper to further reduce AnswerTerms. To test this class one 
needs to put in arbitrary AnswerTerms and check wether the returned NF is correct.
SubquerySaver saves all for future reference necessary subqueries. To test this class one needs to put in queries and check afterwards if all necessary subqueries were saved.
